---
title: "Canadian Nutrient DATA PACKAGE"
author: "Javier Gutierrez Bach"
date: "2024-04-11"
date-format: iso
format: gfm
editor: source
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(CanadianNutrient)
```

This file describes the Canadian Nutrient package.

The package is interesting because it provides detailed explanations on a lot of the foods available in the Canadian market. It lets you verify exactly what portion of the food is each yield and refuse, as well as telling you detailed information on every nutrient it has and how to make scale conversions or calculations to determine how much of each nutrient your particular meal might have. It additionally holds information from the foods and nutrients come from (sources) and provides names and descriptions in both English and French which is useful for the people in French Canada. 

The `CanadianNutrient` package can be installed by running:

```
devtools::install_github("STAT231-S24/CanadianNutrient")
library(CanadianNutrient)
```

```{r}
glimpse(FoodGroup)
```

Here are some sample analyses:

You could wrangle the data and join tables to answer questions such as the following:

Which foods have at least 20g of protein?

```{r}
NutrientNames |> 
  inner_join(NutrientAmounts, by = 'nutrient_id') |> 
  filter(nutrient_name == 'PROTEIN', nutrient_value >= 20.00) |> 
  inner_join(FoodNames, by = 'food_id') |> 
  select(food_description, nutrient_value) |> 
  rename("protein_in_g" = nutrient_value)
```
Another example is grouping all the foods by their food group, and taking the average of trans fat that a food in that group might have, to get an idea of the groups with the most or least fat.

```{r}

NutrientNames |> 
  inner_join(NutrientAmounts, by = 'nutrient_id') |> 
  filter(nutrient_name == 'FAT (TOTAL LIPIDS)') |> 
  inner_join(FoodNames, by = 'food_id') |> 
  inner_join(FoodGroup, by = 'food_group_id') |> 
  rename("fat_in_g" = nutrient_value) |> 
  group_by(food_group_name) |> 
  summarise(num_of_foods = n(), avg_fat_per_food_in_g = mean(fat_in_g)) |> 
  arrange(desc(avg_fat_per_food_in_g))
  
```

You could use the data set to filter the foods by the ingredients of your lunch today, and sum up the vitamin B-12 of all the ingredients to verify the vitamin B-12 count of your meal, using the appropriate conversion factor based on how much you ate.

In the case where I ate an omelet for breakfast:

```{r}
NutrientNames |> 
  inner_join(NutrientAmounts, by = 'nutrient_id') |> 
  rename("vitamin_b12_in_g" = nutrient_value) |> 
  filter(nutrient_name == 'VITAMIN B-12') |> 
  inner_join(FoodNames, by = 'food_id') |> 
  filter(food_description == 'Egg, chicken, whole, cooked, scrambled or omelet') |> 
  inner_join(ConversionFactor, by = 'food_id') |> 
  inner_join(MeasureNames, by = 'measure_id') |> 
  mutate(total_vitamin_b12_in_g = vitamin_b12_in_g * conversion_factor_value) |> 
  select(measure_description, conversion_factor_value, total_vitamin_b12_in_g)
```
Here you can see a variety of measures for our egg food item according to the data base, and the total Vitamin B12 that comes with each measure. So lets say I ate an omelet with two large eggs, then my meal had roughly 1.7g of Vitamin B12

Those were a few examples of possible questions you might want to investigate with this data set, but the possibilities are endless.

Wrangle away!
